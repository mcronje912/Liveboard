<div class="min-h-screen bg-gray-50" phx-hook="DragDrop" id="board-container">
  <!-- Header -->
  <div class="bg-white shadow-sm border-b">
    <div class="w-full px-6 lg:px-8">
      <div class="flex items-center justify-between h-16">
        <div class="flex items-center">
          <.link navigate={~p"/boards"} class="text-gray-500 hover:text-gray-700 mr-4">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
            </svg>
          </.link>
          <div class="w-3 h-3 rounded mr-3" style={"background-color: #{@board.color}"}></div>
          <h1 class="text-xl font-semibold text-gray-900"><%= @board.name %></h1>
          <span class="ml-3 px-2 py-1 text-xs bg-blue-100 text-blue-700 rounded-full">
            âœ¨ Real-Time Collaboration
          </span>
        </div>
        
        <!-- Online Users Display -->
        <.online_users users={@online_users} user_count={@user_count} />
      </div>
    </div>
  </div>

  <!-- Main Content Area - FULL WIDTH, NO WASTE -->
  <div class="w-full">
    
    <!-- Board Columns - MAXIMUM WIDTH UTILIZATION -->
    <div class="w-full px-6 lg:px-8 py-6">
      <!-- Ultra-Responsive Grid - Uses ALL Available Width -->
      <div class="w-full grid gap-4 lg:gap-6" 
           style="grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));">
        
        <!-- Columns -->
        <div :for={column <- @board.columns} 
             class="w-full" 
             data-droppable="column" 
             data-column-id={column.id}>
          <div class="bg-white rounded-lg shadow-sm border transition-colors duration-200 h-full">
            <!-- Column Header -->
            <div class="px-4 py-3 border-b bg-gray-50 rounded-t-lg">
              <div class="flex items-center justify-between">
                <div class="flex items-center min-w-0 flex-1">
                  <div class="w-3 h-3 rounded mr-2 flex-shrink-0" style={"background-color: #{column.color}"}></div>
                  <h3 class="font-medium text-gray-900 truncate"><%= column.name %></h3>
                  <span class="ml-2 px-2 py-1 text-xs bg-gray-200 text-gray-700 rounded-full flex-shrink-0">
                    <%= length(column.tasks) %>
                  </span>
                </div>
                <button 
                  onclick={"showModal('new-task-modal-#{column.id}')"}
                  class="text-gray-400 hover:text-gray-600 flex-shrink-0 ml-2"
                >
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                  </svg>
                </button>
              </div>
            </div>

            <!-- Tasks Container -->
            <div class="p-3 space-y-3 min-h-[500px] transition-colors duration-200">
              <div :for={task <- column.tasks} 
                   class="bg-white border rounded-lg p-3 shadow-sm hover:shadow-md transition-all duration-200 cursor-move"
                   data-draggable="task"
                   data-task-id={task.id}>
                <div class="flex items-start justify-between">
                  <div class="flex-1 min-w-0">
                    <!-- Drag Handle -->
                    <div class="flex items-center mb-2">
                      <svg class="w-4 h-4 text-gray-400 mr-2 drag-handle flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8h16M4 16h16"/>
                      </svg>
                      <h4 class="font-medium text-gray-900 text-sm truncate"><%= task.title %></h4>
                    </div>
                    
                    <p :if={task.description} class="text-gray-600 text-xs mt-1 line-clamp-2"><%= task.description %></p>
                    
                    <div class="flex items-center mt-2 space-x-2">
                      <span class={[
                        "px-2 py-1 text-xs rounded-full flex-shrink-0",
                        task.priority == "high" && "bg-red-100 text-red-700",
                        task.priority == "medium" && "bg-yellow-100 text-yellow-700",
                        task.priority == "low" && "bg-green-100 text-green-700"
                      ]}>
                        <%= task.priority %>
                      </span>
                      
                      <div :if={task.assignee} class="w-5 h-5 rounded-full flex items-center justify-center text-white text-xs flex-shrink-0" style={"background-color: #{task.assignee.avatar_color}"}>
                        <%= String.upcase(String.at(task.assignee.name, 0)) %>
                      </div>
                    </div>
                  </div>
                  
                  <div class="flex space-x-1 ml-2 flex-shrink-0">
                    <!-- Move Task Buttons -->
                    <div class="relative">
                      <button 
                        onclick={"toggleMenu('move-menu-#{task.id}')"}
                        class="text-gray-400 hover:text-gray-600"
                      >
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l4-4 4 4m0 6l-4 4-4-4"/>
                        </svg>
                      </button>
                      
                      <!-- Move Menu -->
                      <div id={"move-menu-#{task.id}"} class="hidden absolute right-0 mt-1 w-48 bg-white rounded-md shadow-lg z-10 border">
                        <div class="py-1">
                          <div :for={other_column <- @board.columns} :if={other_column.id != column.id}>
                            <button 
                              phx-click="move_task"
                              phx-value-task_id={task.id}
                              phx-value-column_id={other_column.id}
                              onclick={"hideMenu('move-menu-#{task.id}')"}
                              class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                            >
                              Move to <%= other_column.name %>
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <button 
                      phx-click="delete_task"
                      phx-value-task_id={task.id}
                      data-confirm="Are you sure you want to delete this task?"
                      class="text-gray-400 hover:text-red-600"
                    >
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                      </svg>
                    </button>
                  </div>
                </div>
              </div>
              
              <!-- Add Task Button -->
              <button 
                onclick={"showModal('new-task-modal-#{column.id}')"}
                class="w-full p-4 border-2 border-dashed border-gray-300 rounded-lg text-gray-500 hover:border-gray-400 hover:text-gray-600 transition-colors text-sm"
              >
                <svg class="w-5 h-5 mx-auto mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                </svg>
                Add a task
              </button>
            </div>
          </div>

          <!-- New Task Modal -->
          <div id={"new-task-modal-#{column.id}"} class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
            <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
              <div class="mt-3">
                <div class="flex items-center justify-between mb-4">
                  <h3 class="text-lg font-medium text-gray-900">Add Task to <%= column.name %></h3>
                  <button 
                    onclick={"hideModal('new-task-modal-#{column.id}')"}
                    class="text-gray-400 hover:text-gray-600"
                  >
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                  </button>
                </div>
                
                <form phx-submit="create_task" onsubmit={"setTimeout(() => hideModal('new-task-modal-#{column.id}'), 100)"}>
                  <input type="hidden" name="column_id" value={column.id} />
                  <div class="mb-4">
                    <label for={"task_title_#{column.id}"} class="block text-sm font-medium text-gray-700">Task Title</label>
                    <input 
                      type="text" 
                      id={"task_title_#{column.id}"}
                      name="title" 
                      required 
                      class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
                      placeholder="What needs to be done?"
                    />
                  </div>
                  <div class="flex justify-end space-x-3">
                    <button 
                      type="button" 
                      onclick={"hideModal('new-task-modal-#{column.id}')"}
                      class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
                    >
                      Cancel
                    </button>
                    <button 
                      type="submit" 
                      class="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700"
                    >
                      Add Task
                    </button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Activity Feed - Bottom Section - FULL WIDTH -->
    <div class="w-full px-6 lg:px-8 pb-6">
      <div class="w-full">
        <.activity_feed activities={@recent_activities} />
      </div>
    </div>
    
  </div>
</div>

<script>
  // Modal Management Functions
  function showModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
      modal.classList.remove('hidden');
      setTimeout(() => {
        const input = modal.querySelector('input[type="text"]');
        if (input) input.focus();
      }, 100);
    }
  }

  function hideModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
      modal.classList.add('hidden');
      const form = modal.querySelector('form');
      if (form) form.reset();
    }
  }

  function toggleMenu(menuId) {
    const menu = document.getElementById(menuId);
    if (menu) {
      menu.classList.toggle('hidden');
    }
  }

  function hideMenu(menuId) {
    const menu = document.getElementById(menuId);
    if (menu) {
      menu.classList.add('hidden');
    }
  }

  // Close modals when clicking outside
  document.addEventListener('click', function(e) {
    if (e.target.classList.contains('bg-gray-600')) {
      const modals = document.querySelectorAll('[id^="new-task-modal-"]');
      modals.forEach(modal => {
        modal.classList.add('hidden');
      });
    }
  });

  // ESC key to close modals
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
      const modals = document.querySelectorAll('[id^="new-task-modal-"]');
      modals.forEach(modal => {
        modal.classList.add('hidden');
      });
    }
  });
</script>

<style>
  /* Drag and Drop Styles */
  .drag-over {
    @apply bg-blue-50 border-blue-300 border-2 border-dashed;
  }
  
  .dragging .drag-over {
    @apply bg-blue-100;
  }
  
  [data-draggable="task"]:hover {
    @apply shadow-lg transform scale-105;
  }
  
  .dragging [data-draggable="task"] {
    @apply transition-transform;
  }
  
  .drag-handle {
    cursor: grab;
  }
  
  .drag-handle:active {
    cursor: grabbing;
  }

  /* FULL WIDTH UTILIZATION - No waste! */
  .w-full {
    width: 100% !important;
  }

  /* Smart responsive grid that uses ALL space */
  @media (min-width: 1400px) {
    .grid {
      grid-template-columns: repeat(auto-fit, minmax(320px, 1fr)) !important;
    }
  }

  @media (min-width: 1800px) {
    .grid {
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)) !important;
    }
  }

  @media (min-width: 2400px) {
    .grid {
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)) !important;
    }
  }

  /* Text truncation */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>