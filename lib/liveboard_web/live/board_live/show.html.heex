<div class="min-h-screen bg-gray-50" phx-hook="DragDrop" id="board-container">
  <!-- Header -->
  <div class="bg-white shadow-sm border-b">
    <div class="w-full px-6 lg:px-8">
      <div class="flex items-center justify-between h-16">
        <div class="flex items-center">
          <.link navigate={~p"/boards"} class="text-gray-500 hover:text-gray-700 mr-4">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
            </svg>
          </.link>
          <div class="w-3 h-3 rounded mr-3" style={"background-color: #{@board.color}"}></div>
          <h1 class="text-xl font-semibold text-gray-900"><%= @board.name %></h1>
          <span class="ml-3 px-2 py-1 text-xs bg-blue-100 text-blue-700 rounded-full">
            âœ¨ Real-Time Collaboration
          </span>
        </div>
        
        <!-- Online Users Display -->
        <.online_users users={@online_users} user_count={@user_count} />
      </div>
    </div>
  </div>

  <!-- Main Content - ULTRA WIDE OPTIMIZED -->
  <div class="w-full px-6 lg:px-8 py-6">
    <!-- Columns Container - Uses 100% Width -->
    <div class="w-full overflow-x-auto">
      <div class="flex space-x-6 min-w-full">
        <!-- Dynamic width columns -->
        <div :for={column <- @board.columns} 
             class="flex-1 min-w-80 max-w-96" 
             data-droppable="column" 
             data-column-id={column.id}>
          <div class="bg-white rounded-lg shadow-sm border transition-colors duration-200 h-full">
            <!-- Column Header -->
            <div class="px-4 py-3 border-b bg-gray-50 rounded-t-lg">
              <div class="flex items-center justify-between">
                <div class="flex items-center min-w-0 flex-1">
                  <div class="w-3 h-3 rounded mr-2 flex-shrink-0" style={"background-color: #{column.color}"}></div>
                  <h3 class="font-medium text-gray-900 truncate"><%= column.name %></h3>
                  <span class="ml-2 px-2 py-1 text-xs bg-gray-200 text-gray-700 rounded-full flex-shrink-0">
                    <%= length(column.tasks) %>
                  </span>
                </div>
                <button 
                  onclick={"showModal('new-task-modal-#{column.id}')"}
                  class="text-gray-400 hover:text-gray-600 flex-shrink-0 ml-2"
                >
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                  </svg>
                </button>
              </div>
            </div>

            <!-- Tasks Container -->
            <div class="p-3 space-y-3 min-h-[500px] transition-colors duration-200">
              <div :for={task <- column.tasks} 
                   class="bg-white border rounded-lg p-3 shadow-sm hover:shadow-md transition-all duration-200 cursor-pointer"
                   data-draggable="task"
                   data-task-id={task.id}
                   onclick={"showTaskDetail(#{task.id})"}>
                <div class="flex items-start justify-between">
                  <div class="flex-1 min-w-0">
                    <!-- Drag Handle & Title -->
                    <div class="flex items-center mb-2">
                      <svg class="w-4 h-4 text-gray-400 mr-2 drag-handle flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24" onclick="event.stopPropagation()">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8h16M4 16h16"/>
                      </svg>
                      <h4 class="font-medium text-gray-900 text-sm truncate"><%= task.title %></h4>
                      <!-- Description indicator -->
                      <%= if task.description && task.description != "" do %>
                        <svg class="w-3 h-3 text-gray-400 ml-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24" title="Has description">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                        </svg>
                      <% end %>
                    </div>
                    
                    <!-- Description Preview -->
                    <%= if task.description && task.description != "" do %>
                      <p class="text-gray-600 text-xs mt-1 mb-3 line-clamp-2"><%= task.description %></p>
                    <% end %>
                    
                    <!-- Priority & Assignee -->
                    <div class="flex items-center justify-between mb-3">
                      <div class="flex items-center space-x-2">
                        <span class={[
                          "px-2 py-1 text-xs rounded-full flex-shrink-0",
                          task.priority == "high" && "bg-red-100 text-red-700",
                          task.priority == "medium" && "bg-yellow-100 text-yellow-700",
                          task.priority == "low" && "bg-green-100 text-green-700"
                        ]}>
                          <%= task.priority %>
                        </span>
                        
                        <div :if={task.assignee} class="w-5 h-5 rounded-full flex items-center justify-center text-white text-xs flex-shrink-0" 
                             style={"background-color: #{task.assignee.avatar_color}"}
                             title={"Assigned to #{task.assignee.name}"}>
                          <%= String.upcase(String.at(task.assignee.name, 0)) %>
                        </div>
                      </div>
                    </div>
                    
                    <!-- Creator & Date Info -->
                    <div class="flex items-center justify-between pt-2 border-t border-gray-100">
                      <div class="flex items-center space-x-2">
                        <!-- Creator Avatar -->
                        <div class="w-5 h-5 rounded-full flex items-center justify-center text-white text-xs flex-shrink-0" 
                             style={"background-color: #{task.created_by.avatar_color}"}
                             title={"Created by #{task.created_by.name}"}>
                          <%= String.upcase(String.at(task.created_by.name, 0)) %>
                        </div>
                        <!-- Creator Name -->
                        <span class="text-xs text-gray-500 truncate">
                          by <%= task.created_by.name %>
                        </span>
                      </div>
                      
                      <!-- Creation Date -->
                      <span class="text-xs text-gray-400 flex-shrink-0" title={Calendar.strftime(task.inserted_at, "%B %d, %Y at %I:%M %p")}>
                        <%= time_ago(task.inserted_at) %>
                      </span>
                    </div>
                  </div>
                  
                  <div class="flex space-x-1 ml-2 flex-shrink-0">
                    <!-- Move Task Buttons -->
                    <div class="relative">
                      <button 
                        onclick={"event.stopPropagation(); toggleMenu('move-menu-#{task.id}')"}
                        class="text-gray-400 hover:text-gray-600"
                      >
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l4-4 4 4m0 6l-4 4-4-4"/>
                        </svg>
                      </button>
                      
                      <!-- Move Menu -->
                      <div id={"move-menu-#{task.id}"} class="hidden absolute right-0 mt-1 w-48 bg-white rounded-md shadow-lg z-10 border">
                        <div class="py-1">
                          <div :for={other_column <- @board.columns} :if={other_column.id != column.id}>
                            <button 
                              phx-click="move_task"
                              phx-value-task_id={task.id}
                              phx-value-column_id={other_column.id}
                              onclick={"event.stopPropagation(); hideMenu('move-menu-#{task.id}')"}
                              class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                            >
                              Move to <%= other_column.name %>
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <button 
                      class="text-gray-400 hover:text-red-600"
                      onclick={"event.stopPropagation(); deleteTask(#{task.id})"}
                    >
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                      </svg>
                    </button>
                  </div>
                </div>
              </div>
              
              <!-- Add Task Button -->
              <button 
                onclick={"showModal('new-task-modal-#{column.id}')"}
                class="w-full p-4 border-2 border-dashed border-gray-300 rounded-lg text-gray-500 hover:border-gray-400 hover:text-gray-600 transition-colors text-sm"
              >
                <svg class="w-5 h-5 mx-auto mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                </svg>
                Add a task
              </button>
            </div>
          </div>

          <!-- New Task Modal -->
          <div id={"new-task-modal-#{column.id}"} class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
            <div class="relative top-10 mx-auto p-5 border w-[500px] shadow-lg rounded-md bg-white">
              <div class="mt-3">
                <div class="flex items-center justify-between mb-4">
                  <h3 class="text-lg font-medium text-gray-900">Add Task to <%= column.name %></h3>
                  <button 
                    onclick={"hideModal('new-task-modal-#{column.id}')"}
                    class="text-gray-400 hover:text-gray-600"
                  >
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                  </button>
                </div>
                
                <form phx-submit="create_task" onsubmit={"setTimeout(() => hideModal('new-task-modal-#{column.id}'), 100)"}>
                  <input type="hidden" name="column_id" value={column.id} />
                  
                  <!-- Task Title -->
                  <div class="mb-4">
                    <label for={"task_title_#{column.id}"} class="block text-sm font-medium text-gray-700">Task Title *</label>
                    <input 
                      type="text" 
                      id={"task_title_#{column.id}"}
                      name="title" 
                      required 
                      class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
                      placeholder="What needs to be done?"
                    />
                  </div>

                  <!-- Task Description -->
                  <div class="mb-4">
                    <label for={"task_description_#{column.id}"} class="block text-sm font-medium text-gray-700">Description</label>
                    <textarea 
                      id={"task_description_#{column.id}"}
                      name="description" 
                      rows="4"
                      class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
                      placeholder="Add more details about this task (optional)..."
                    ></textarea>
                    <p class="mt-1 text-xs text-gray-500">Provide additional context, requirements, or notes for this task.</p>
                  </div>

                  <!-- Priority Selection -->
                  <div class="mb-6">
                    <label class="block text-sm font-medium text-gray-700 mb-2">Priority</label>
                    <div class="flex space-x-3">
                      <label class="flex items-center">
                        <input type="radio" name="priority" value="low" checked class="form-radio text-green-600" />
                        <span class="ml-2 text-sm text-gray-700">Low</span>
                      </label>
                      <label class="flex items-center">
                        <input type="radio" name="priority" value="medium" class="form-radio text-yellow-600" />
                        <span class="ml-2 text-sm text-gray-700">Medium</span>
                      </label>
                      <label class="flex items-center">
                        <input type="radio" name="priority" value="high" class="form-radio text-red-600" />
                        <span class="ml-2 text-sm text-gray-700">High</span>
                      </label>
                    </div>
                  </div>
                  
                  <div class="flex justify-end space-x-3">
                    <button 
                      type="button" 
                      onclick={"hideModal('new-task-modal-#{column.id}')"}
                      class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
                    >
                      Cancel
                    </button>
                    <button 
                      type="submit" 
                      class="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700"
                    >
                      Add Task
                    </button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Activity Feed - Bottom Section - FULL WIDTH -->
    <div class="w-full mt-8">
      <.activity_feed activities={@recent_activities} />
    </div>
  </div>

  <!-- Task Detail Modal -->
  <div id="task-detail-modal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
    <div class="relative top-10 mx-auto p-5 border w-[600px] shadow-lg rounded-md bg-white">
      <div class="mt-3" id="task-detail-content">
        <!-- Content will be populated by JavaScript -->
      </div>
    </div>
  </div>

  <!-- Edit Task Modal -->
  <div id="edit-task-modal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
    <div class="relative top-10 mx-auto p-5 border w-[500px] shadow-lg rounded-md bg-white">
      <div class="mt-3">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-medium text-gray-900">Edit Task</h3>
          <button onclick="hideEditModal()" class="text-gray-400 hover:text-gray-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
          </button>
        </div>
        
        <form id="edit-task-form" phx-submit="update_task">
          <input type="hidden" id="edit-task-id" name="task_id" />
          
          <!-- Task Title -->
          <div class="mb-4">
            <label for="edit-task-title" class="block text-sm font-medium text-gray-700">Task Title *</label>
            <input 
              type="text" 
              id="edit-task-title"
              name="title" 
              required 
              class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
            />
          </div>

          <!-- Task Description -->
          <div class="mb-4">
            <label for="edit-task-description" class="block text-sm font-medium text-gray-700">Description</label>
            <textarea 
              id="edit-task-description"
              name="description" 
              rows="4"
              class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
            ></textarea>
          </div>

          <!-- Priority Selection -->
          <div class="mb-6">
            <label class="block text-sm font-medium text-gray-700 mb-2">Priority</label>
            <div class="flex space-x-3">
              <label class="flex items-center">
                <input type="radio" name="priority" value="low" class="form-radio text-green-600" />
                <span class="ml-2 text-sm text-gray-700">Low</span>
              </label>
              <label class="flex items-center">
                <input type="radio" name="priority" value="medium" class="form-radio text-yellow-600" />
                <span class="ml-2 text-sm text-gray-700">Medium</span>
              </label>
              <label class="flex items-center">
                <input type="radio" name="priority" value="high" class="form-radio text-red-600" />
                <span class="ml-2 text-sm text-gray-700">High</span>
              </label>
            </div>
          </div>
          
          <div class="flex justify-end space-x-3">
            <button 
              type="button" 
              onclick="hideEditModal()"
              class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
            >
              Cancel
            </button>
            <button 
              type="submit" 
              class="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700"
            >
              Update Task
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<script>
  // Store task data for modal
  window.taskData = {};
  
  // Populate task data from server
  <% for column <- @board.columns do %>
    <% for task <- column.tasks do %>
      window.taskData[<%= task.id %>] = {
        id: <%= task.id %>,
        title: '<%= String.replace(task.title, "'", "\\'") %>',
        description: '<%= if task.description, do: String.replace(task.description, "'", "\\'"), else: "" %>',
        priority: '<%= task.priority %>',
        createdBy: '<%= task.created_by.name %>',
        createdByColor: '<%= task.created_by.avatar_color %>',
        createdAt: '<%= Calendar.strftime(task.inserted_at, "%B %d, %Y at %I:%M %p") %>',
        assignee: <%= if task.assignee, do: "{ name: '#{task.assignee.name}', color: '#{task.assignee.avatar_color}' }", else: "null" %>,
        column: '<%= Enum.find(@board.columns, &(&1.id == task.column_id)).name %>'
      };
    <% end %>
  <% end %>

  // Delete task function
  function deleteTask(taskId) {
    if (confirm('Are you sure you want to delete this task?')) {
      // Trigger Phoenix event
      window.liveSocket.execJS(document.body, `[["dispatch", {"event": "delete_task", "value": {"task_id": "${taskId}"}}]]`);
    }
  }

  // Show task detail modal
  function showTaskDetail(taskId) {
    const task = window.taskData[taskId];
    if (!task) return;
    
    const modal = document.getElementById('task-detail-modal');
    const content = document.getElementById('task-detail-content');
    
    const assigneeHtml = task.assignee ? 
      `<div class="flex items-center space-x-2">
         <div class="w-6 h-6 rounded-full flex items-center justify-center text-white text-xs" 
              style="background-color: ${task.assignee.color}">
           ${task.assignee.name.charAt(0).toUpperCase()}
         </div>
         <span class="text-sm text-gray-700">${task.assignee.name}</span>
       </div>` : 
      `<span class="text-sm text-gray-500">Unassigned</span>`;
    
    const priorityColor = {
      'low': 'bg-green-100 text-green-700',
      'medium': 'bg-yellow-100 text-yellow-700', 
      'high': 'bg-red-100 text-red-700'
    }[task.priority];
    
    content.innerHTML = `
      <div class="flex items-center justify-between mb-6">
        <h3 class="text-xl font-semibold text-gray-900">Task Details</h3>
        <div class="flex space-x-2">
          <button onclick="showEditModal(${task.id})" class="text-blue-600 hover:text-blue-800">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
            </svg>
          </button>
          <button onclick="hideTaskDetail()" class="text-gray-400 hover:text-gray-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
          </button>
        </div>
      </div>
      
      <!-- Task Title -->
      <div class="mb-4">
        <h4 class="text-lg font-medium text-gray-900 mb-2">${task.title}</h4>
        <div class="flex items-center space-x-3">
          <span class="px-2 py-1 text-xs rounded-full ${priorityColor}">${task.priority}</span>
          <span class="text-sm text-gray-500">in ${task.column}</span>
        </div>
      </div>
      
      <!-- Description -->
      ${task.description ? `
        <div class="mb-6">
          <h5 class="text-sm font-medium text-gray-700 mb-2">Description</h5>
          <div class="bg-gray-50 rounded-lg p-3">
            <p class="text-sm text-gray-800 whitespace-pre-wrap">${task.description}</p>
          </div>
        </div>
      ` : `
        <div class="mb-6">
          <h5 class="text-sm font-medium text-gray-700 mb-2">Description</h5>
          <p class="text-sm text-gray-500 italic">No description provided</p>
        </div>
      `}
      
      <!-- Task Info Grid -->
      <div class="grid grid-cols-2 gap-4 mb-6">
        <div>
          <h5 class="text-sm font-medium text-gray-700 mb-2">Assigned To</h5>
          ${assigneeHtml}
        </div>
        <div>
          <h5 class="text-sm font-medium text-gray-700 mb-2">Created By</h5>
          <div class="flex items-center space-x-2">
            <div class="w-6 h-6 rounded-full flex items-center justify-center text-white text-xs" 
                 style="background-color: ${task.createdByColor}">
              ${task.createdBy.charAt(0).toUpperCase()}
            </div>
            <span class="text-sm text-gray-700">${task.createdBy}</span>
          </div>
        </div>
      </div>
      
      <!-- Created Date -->
      <div class="pt-4 border-t border-gray-200">
        <p class="text-xs text-gray-500">Created on ${task.createdAt}</p>
      </div>
    `;
    
    modal.classList.remove('hidden');
  }

  function hideTaskDetail() {
    document.getElementById('task-detail-modal').classList.add('hidden');
  }

  // Show edit modal
  function showEditModal(taskId) {
    const task = window.taskData[taskId];
    if (!task) return;
    
    // Hide detail modal
    hideTaskDetail();
    
    // Populate edit form
    document.getElementById('edit-task-id').value = task.id;
    document.getElementById('edit-task-title').value = task.title;
    document.getElementById('edit-task-description').value = task.description || '';
    
    // Set priority radio button
    const priorityRadio = document.querySelector(`input[name="priority"][value="${task.priority}"]`);
    if (priorityRadio) priorityRadio.checked = true;
    
    // Show edit modal
    document.getElementById('edit-task-modal').classList.remove('hidden');
    
    // Focus on title field
    setTimeout(() => {
      document.getElementById('edit-task-title').focus();
    }, 100);
  }

  function hideEditModal() {
    document.getElementById('edit-task-modal').classList.add('hidden');
    document.getElementById('edit-task-form').reset();
  }

  // Modal Management Functions
  function showModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
      modal.classList.remove('hidden');
      setTimeout(() => {
        const input = modal.querySelector('input[type="text"]');
        if (input) input.focus();
      }, 100);
    }
  }

  function hideModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
      modal.classList.add('hidden');
      const form = modal.querySelector('form');
      if (form) form.reset();
    }
  }

  function toggleMenu(menuId) {
    const menu = document.getElementById(menuId);
    if (menu) {
      menu.classList.toggle('hidden');
    }
  }

  function hideMenu(menuId) {
    const menu = document.getElementById(menuId);
    if (menu) {
      menu.classList.add('hidden');
    }
  }

  // Close modals when clicking outside
  document.addEventListener('click', function(e) {
    if (e.target.classList.contains('bg-gray-600')) {
      const modals = document.querySelectorAll('[id^="new-task-modal-"], #task-detail-modal, #edit-task-modal');
      modals.forEach(modal => {
        modal.classList.add('hidden');
      });
    }
  });

  // ESC key to close modals
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
      const modals = document.querySelectorAll('[id^="new-task-modal-"], #task-detail-modal, #edit-task-modal');
      modals.forEach(modal => {
        modal.classList.add('hidden');
      });
    }
  });
</script>

<style>
  /* Drag and Drop Styles */
  .drag-over {
    @apply bg-blue-50 border-blue-300 border-2 border-dashed;
  }
  
  .dragging .drag-over {
    @apply bg-blue-100;
  }
  
  [data-draggable="task"]:hover {
    @apply shadow-lg transform scale-105;
  }
  
  .dragging [data-draggable="task"] {
    @apply transition-transform;
  }
  
  .drag-handle {
    cursor: grab;
  }
  
  .drag-handle:active {
    cursor: grabbing;
  }

  /* ULTRA WIDE SCREEN OPTIMIZATION */
  .flex {
    display: flex !important;
  }
  
  .flex-1 {
    flex: 1 1 0% !important;
  }
  
  /* Ensure columns use available space efficiently */
  @media (min-width: 1400px) {
    .min-w-80 {
      min-width: 22rem !important;
    }
    .max-w-96 {
      max-width: 26rem !important;
    }
  }

  @media (min-width: 1800px) {
    .min-w-80 {
      min-width: 24rem !important;
    }
    .max-w-96 {
      max-width: 28rem !important;
    }
  }

  /* Text truncation */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Enhanced task card styling */
  [data-draggable="task"] {
    transition: all 0.2s ease;
  }

  [data-draggable="task"]:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
  }

  /* Task detail modal styling */
  #task-detail-modal .whitespace-pre-wrap {
    white-space: pre-wrap;
    word-wrap: break-word;
  }
</style>